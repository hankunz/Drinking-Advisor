{
  "name": "grunt-run",
  "description": "Invite external commands into your grunt process with three tasks `run`, `wait` and `stop`.",
  "version": "0.2.1",
  "homepage": "https://github.com/spenceralger/grunt-run",
  "author": {
    "name": "Spencer Alger",
    "email": "spencer@spenceralger.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/spenceralger/grunt-run.git"
  },
  "bugs": {
    "url": "https://github.com/spenceralger/grunt-run/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/spenceralger/grunt-run/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.7",
    "grunt": "~0.4"
  },
  "peerDependencies": {
    "grunt": "~0.4"
  },
  "keywords": [
    "gruntplugin",
    "child_process",
    "run",
    "exec"
  ],
  "readme": "# grunt-run\n\n> Invite external commands into your grunt process with three tasks `run`, `wait` and `stop`.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-run --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-run');\n```\n\n## The \"run\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `run` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  run: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      cmd: 'executable',\n      args: [\n        'arg1',\n        'arg2'\n      ]\n    }\n  }\n})\n```\n\n### Src/files/etc\n\nSince this task doesn't operate on \"files\" it also doesn't use the standard src/files options. Instead, specify a `cmd:` and `args:` key to your test's config (see examples). `cmd:` defaults to `\"node\"`.\n\nIf you would like to specify your command as a single string, usefull for specifying multiple commands in one task, use the `exec:` key\n\n\n### Options\n\n#### options.wait\nType: `Boolean`\nDefault value: `true`\n\nShould this task wait until the script exits before finishing?\n\n#### options.cwd\nType: `String`\nDefault value: `process.cwd()`\n\nShould we change the working directory for the command runs in?\n\n#### options.quiet\nType: `Boolean`, `Infinity`\nDefault value: `false`\n\nSet to `true` to ignore stdout from the process, `Infinity` to ignore stderr as well (opts.failOnError will still work)\n\n#### options.ready\nType: `RegExp`, `Number`, or `false`\nDefault value: 1000\n\nIf we are **not** waiting for the process to complete, then how do we know the process is ready?\n\nA RegExp will test the lines from stdout and complete the task once the test succeeds, a Number will just set a timeout, and anything else will complete the task on nextTick\n\n#### options.failOnError\nType: `Boolean`\nDefault value: `false`\n\nIf the process outputs anything on stderr then the process will be killed. If wait is `true` it will cause the task to fail as well.\n\n#### options.passArgs\nType: `Array`\nDefault value: `[]`\n\nBefore running the command, look for these options using [grunt.option()](http://gruntjs.com/api/grunt.option#grunt.option). The syntax supported for specifying command line args in grunt is `--option1=myValue`.\n\n### Usage Examples\n\n#### Default\nWant to just run some command line tool? With this config calling `grunt run:tool` will run that tool.\n\n```js\ngrunt.initConfig({\n  run: {\n    tool: {\n      cmd: './some-bash-script',\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-run');\n```\n\n#### Multiple scripts\nWant to run a few commands. With this config calling `grunt run:commands` will run them.\n\n```js\ngrunt.initConfig({\n  run: {\n    commands: {\n      exec: './some-bash-script && ./some-other-script',\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-run');\n```\n\n#### `wait`ing\nIn this example, we are starting a small server that will serve our mocha tests to a browser. We will then open that page in the browser and tell grunt to wait until the process is exited, which probably won't happen so the process will just run until the user ends the process manually.\n\n```js\ngrunt.initConfig({\n  run: {\n    integration_server: {\n      options: {\n        wait: false\n      },\n      // cmd: \"node\", // but that's the default\n      args: [\n        'test/integration_server.js'\n      ]\n    }\n  },\n  // https://github.com/jsoverson/grunt-open\n  open: {\n    integration_suite: {\n      path: 'http://localhost:8888',\n      app: 'Google Chrome'\n    }\n\n  }\n});\n\ngrunt.loadNpmTasks('grunt-run');\ngrunt.loadNpmTasks('grunt-open');\n\ngrunt.registerTask('test', [\n  'run:integration_server',\n  'open:integration_tests',\n  'wait:integration_server'\n]);\n```\n\n#### `stop`ing\nWe can do something similar using grunt-mocha to run the tests inside phantomjs, but instead of waiting for the process we will just stop it once mocha is done.\n\n```js\ngrunt.initConfig({\n  run: {\n    integration_server: {\n      options: {\n        wait: false\n      },\n      args: [\n        'test/integration_server.js'\n      ]\n    }\n  },\n  // https://github.com/kmiyashiro/grunt-mocha\n  mocha: {\n    integration_suite: {\n      urls: 'http://localhost:8888',\n      app: 'Google Chrome'\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-run');\ngrunt.loadNpmTasks('grunt-mocha');\n\ngrunt.registerTask('test', [\n  'run:integration_server',\n  'mocha:integration_suite',\n  'stop:integration_server'\n]);\n```\n\n#### passing args\nWhen you execute a command, sometimes you want to modify the script form the call to grunt.\n\n```js\ngrunt.initConfig({\n  run: {\n    server: {\n      args: ['./server.js'],\n      options: {\n        passArgs: [\n          'port'\n        ]\n      }\n    }\n  }\n})\n```\n\nThen you can specify a `--port` option when calling grunt and it will be sent to the other process.\n\n```\n$ grunt run:server --port=8888\n# calls \"node ./server.js --port=8888\"\n```\n\n## Contributing\nPlease lint and test your code with the included jshint config, or just run `grunt`.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-run@0.2.1",
  "dist": {
    "shasum": "c8e5f73319c0bec37de1727ff62f612decb954b8"
  },
  "_from": "grunt-run@",
  "_resolved": "https://registry.npmjs.org/grunt-run/-/grunt-run-0.2.1.tgz"
}
